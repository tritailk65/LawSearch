@page "/login"
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService localStorage;
@inject IUserAdminService UserAdminService;

<div class="background_view">
    <div class="login-container">
        <div class="logo_view">
            <img src="/assets/image/logo1.png" />
        </div>

        <div class="title_view">
            <a>Login</a>
        </div>

        <EditForm Model="loginVM" OnValidSubmit="HandleLogin">
            <DataAnnotationsValidator />

            @if (!string.IsNullOrEmpty(loginVM.ErrorMessage))
            {
                <div class="alert alert-danger">@loginVM.ErrorMessage</div>
            }

            <div class="form-group">
                <label for="username">Username</label>
                <InputText  type="text" id="username" class="form-control" @bind-Value="loginVM.Username" placeholder="Enter username" @oninput="ClearErrorMessage" />
                <ValidationMessage For="()=> loginVM.Username"></ValidationMessage>
            </div>
            <div class="form-group">
                <label for="password">Password</label>
                <div class="password-container">
                    <InputText  type="password" id="password" class="form-control" @bind-Value="loginVM.Password" placeholder="Enter password" @oninput="ClearErrorMessage" />
                </div>
                <ValidationMessage For="()=> loginVM.Password"></ValidationMessage>
            </div>
            <button type="submit" class="btn btn-primary mb-3">Login</button>
        </EditForm>
    </div>
</div>

@code {
    private bool isPasswordVisible = false;
    private string togglePasswordText = "Show";
    private LoginVM loginVM = new LoginVM();

    private async Task HandleLogin()
    {
        var rs = await UserAdminService.UserLogin(loginVM);

        if (rs != null)
        {
            var apiResponse = rs;
            if (apiResponse.Status == 200)
            {
                NavigationManager.NavigateTo("/", forceLoad: true);
            }
            else if (apiResponse.Status == 400)
            {
                loginVM.ErrorMessage = apiResponse.Message;
                StateHasChanged();
            }
        }
    }

    private void ClearErrorMessage()
    {
        loginVM.ErrorMessage = string.Empty;
    }
}
