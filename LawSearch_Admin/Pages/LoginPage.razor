@page "/"
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService localStorage;
@inject IUserAdminService UserAdminService;

<div class="background_view">
    <div class="login-container">
        <div class="logo_view">
            <img src="/assets/image/logo1.png" />
        </div>

        <div class="title_view">
            <a>Login</a>
        </div>

        <form>
            <div class="form-group">
                <label for="username">Username</label>
                <input type="text" id="username" class="form-control" @bind="username" placeholder="Enter username" />
            </div>
            <div class="form-group">
                <label for="password">Password</label>
                <div class="password-container">
                    <input type="@passwordInputType" id="password" class="form-control" @bind="password" placeholder="Enter password" />
                    <span class="togglepw_view toggle-password" @onclick="TogglePasswordVisibility">@togglePasswordText</span>
                </div>
            </div>
            <button type="button" class="btn btn-primary" @onclick="HandleLogin">Login</button>
        </form>

        <div class="signup_prompt">
            <a>Don't have an account yet?</a>
            <a class="bold">Signup</a>
        </div>
    </div>
</div>


@code {
    private string username;
    private string password;
    private bool isPasswordVisible = false;
    private string passwordInputType = "password";
    private string togglePasswordText = "Show";

    private async Task HandleLogin()
    {
        ResponseMessage rsUserLogin = await UserAdminService.UserLogin(username, password);

        if (rsUserLogin != null)
        {
            if (rsUserLogin.Status)
            {
                await JsRuntime.InvokeVoidAsync("alert", rsUserLogin.Message);
                await HandleLoginSuccess();
            }
            else
            {
                await JsRuntime.InvokeVoidAsync("alert", rsUserLogin.Error);
                // await JsRuntime.InvokeVoidAsync("alert", "Invalid username or password");
            }
        }
        else
        {
            // handler error
        }

    }

    private async Task HandleLoginSuccess()
    {
        await localStorage.SetItemAsync(LocalStorageKeys.isLogin, true);
        // await localStorage.SetItemAsync(LocalStorageKeys.user, user);

        NavigationManager.NavigateTo("/search");
    }

    private void TogglePasswordVisibility()
    {
        isPasswordVisible = !isPasswordVisible;
        passwordInputType = isPasswordVisible ? "text" : "password";
        togglePasswordText = isPasswordVisible ? "Hide" : "Show";
    }
}
