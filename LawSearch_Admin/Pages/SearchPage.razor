@page "/";
@using LawSearch_Admin.ViewModels
@using Microsoft.AspNetCore.Components.Authorization
@inject ISearchAdminService searchAdminService;
@inject IArticalAdminService articalAdminService;
@inject Blazored.LocalStorage.ILocalStorageService localStorage;
@inject NavigationManager NavigationManager
@inject ICookieService _cookieService;
@inject IHistoryAdminService _historySearchService;
@inject AuthenticationStateProvider _authenticationStateProvider;


<div class="ss">
    <div class="search-container">
        <div class="search-input">
            <input class="input" type="text" placeholder="Hôm nay bạn cần tìm kiếm gì?" spellcheck="false" @bind-value="@input" />
        </div>
        <div class="search-button" @onclick="SearchAction">
            <img class="search-icon" src="assets/icon/search_icon.png" />
        </div>
    </div>

    @if (lstResult != null)
    {
        @*         <div class="info">
    Keyphrases search: @keySearch <br />
    Concept: @conceptTop
    </div> *@
        <div class="result-container">
            <div class="result-total">
                Khoảng @lstResult.Count kết quả - Thời gian tìm kiếm @Math.Round(timeDone, 6) giây
            </div>
            @for (int i = 0; i < lstResult.Count; i++)
            {
                <SearchResultItem Rank="@(i+1)" Artical="@lstResult[i]" />
            }
        </div>
    }
</div>

@code{
    public string keySearch = "";
    public string conceptTop = "";
    public string input;
    public List<ArticalResult> lstResult = null;
    public SearchResult searchResult { get; set; }
    public string UserID = string.Empty;
    public double timeDone = 0;

    protected override async Task OnInitializedAsync()
    {
        var getUserIDFromCookie = await _cookieService.GetValue(CookieKeys.userid);
        if (!string.IsNullOrEmpty(getUserIDFromCookie)) { UserID = getUserIDFromCookie; }
    }

    private async void SearchAction(){
        if(input.Length >= 12)
        {
            //Ghi history search
            await _historySearchService.AddHistorySearch(Convert.ToInt32(UserID), input);

            conceptTop = "";
            keySearch = "";
            var stopwatch = new System.Diagnostics.Stopwatch();
            stopwatch.Start();

            var rs = await searchAdminService.GetResultSearchLaw(input);

            stopwatch.Stop();
            timeDone = stopwatch.Elapsed.TotalMilliseconds / 1000F;

            searchResult = rs;
            lstResult = searchResult.articalResults;

            foreach (var key in searchResult.keyphraseSearch)
            {
                keySearch = keySearch + key.Key + " / ";
            }
            foreach (var con in searchResult.conceptTop)
            {
                conceptTop = conceptTop + con.Name + " / ";
            }
            StateHasChanged();  //Re-render dom
        }
    }
}