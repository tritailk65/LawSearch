@page "/editlaw"
@inject IJSRuntime JsRuntime;
@inject NavigationManager NavigationManager

@inject ILawDocAdminService lawDocAdminService;

<div class="body-container">
    <div class="header-content">
        <div class="title">
            Select your document
        </div>
        <select class="custom-select" @onchange="GetDataLaw" >
            @if(lstLawDoc != null)
            {
                @foreach (var law in lstLawDoc)
                {
                    <option class="dropdown-item" value="@law.ID">@law.Name</option>
                }
            }
        </select>
        <div class="btn">
            <Button ButtonStyle="add-button btn-custom" @onclick="() => {}">
                Add New
            </Button>
            <Button ButtonStyle="delete-button btn-custom" @onclick="DeleteLaw">
                Delete Law
            </Button>
        </div>
    </div>

    <div class="main-content">
        @if (lawVM == null)
        {
            <div class="loading_">
                <span class="loader"></span>
            </div>
        }
        else if (lawVM != null)
        {
            <div class="left-content">
                <div class="index">
                    @if (lawVM.lstChapters.Count > 0)
                    {
                        foreach (var c in lawVM.lstChapters)
                        {
                            <div class="chapter">
                                <img class="icon" src="assests/icon/item_down.png" aria-hidden="true" />
                                @c.Name @c.Title
                            </div>
                            if (c.lstSections != null && c.lstSections.Count > 0)
                            {
                                foreach (var s in c.lstSections)
                                {
                                    if (s.Name != "")
                                    {
                                        <div class="section">
                                            <img class="icon" src="assests/icon/item_down.png" aria-hidden="true" />
                                            @s.Name
                                        </div>
                                    }
                                    if (s.lstArticals.Count > 0)
                                    {
                                        foreach (var a in s.lstArticals)
                                        {
                                            <div class="artical">
                                                <img class="icon" src="assests/icon/item_up.png" aria-hidden="true" />
                                                @a.Name: @a.Title
                                            </div>
                                        }
                                    }
                                }
                            }
                        }
                    }
                </div>
            </div>
        }
        <div class="right-content">

        </div>
    </div>
</div>

@code {
    public List<LawDoc> lstLawDoc = new List<LawDoc>();
    public List<Chapter> lstChapter = new List<Chapter>();
    public LawVM lawVM = new LawVM();
    public int idLawSelect;

    protected override async Task OnInitializedAsync()
    {
        lawVM = null;
        var lstLawDocData = await lawDocAdminService.GetListLawDoc();
        lstLawDoc = lstLawDocData;
        var data = await lawDocAdminService.GetDataLaw(lstLawDoc[0].ID);
        idLawSelect = lstLawDoc[0].ID;
        lawVM = data;
    }

    private async void GetDataLaw(ChangeEventArgs e)
    {
        lawVM = null;
        int id = Convert.ToInt32(e.Value);
        idLawSelect = id;
        var data = await lawDocAdminService.GetDataLaw(id);
        lawVM = data;
        StateHasChanged();
    }

    public async void DeleteLaw()
    {
        var confirm = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure to delete this law ?");
        if (confirm)
        {
            var rs = await lawDocAdminService.DeleteLaw(idLawSelect);
            if (rs)
            {
                await JsRuntime.InvokeVoidAsync("alert", "Delete success!");
                ReloadPage();
            }
            else
            {
                await JsRuntime.InvokeVoidAsync("alert", "Delete fail!");
            }
        }
    }

    public void ReloadPage()
    {
        NavigationManager.NavigateTo(NavigationManager.Uri, true);
    }
}

