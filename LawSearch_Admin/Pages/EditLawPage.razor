@page "/editlaw"
@inject IJSRuntime JsRuntime;
@inject NavigationManager NavigationManager
@inject ILawDocAdminService lawDocAdminService;
@inject Blazored.LocalStorage.ILocalStorageService localStorage;
@inject NavigationManager NavigationManager;

<div class="body-container">
    <div class="header-content">
        <div class="title">
            Select your document
        </div>
        <select class="custom-select" @onchange="GetDataLaw" >
            @if(lstLawDoc != null)
            {
                @foreach (var law in lstLawDoc)
                {
                    <option class="dropdown-item" value="@law.ID">@law.Name</option>
                }
            }
        </select>
        <div class="btn">
            <NavLink href="importlaw">
                <Button ButtonStyle="reset-button btn-custom">
                    Add New
                </Button>
            </NavLink>

            <Button ButtonStyle="reset-button btn-custom" data-toggle="modal" data-target="#modal-delete">
                Delete Law
            </Button>

            <Button ButtonStyle="reset-button btn-custom" data-toggle="modal" data-target="#modal-edit" data-backdrop="static" data-keyboard="false" disabled="@string.IsNullOrEmpty(contentEdit)">
                Edit Content
            </Button>

            <Button ButtonStyle="reset-button btn-custom" data-toggle="modal" data-target="#modal-generate-keyphrase" data-backdrop="static" data-keyboard="false" @onclick="AutogenerateData">
                Auto Generate
            </Button>
        </div>
    </div>

    <div class="main-content">
        @if (lawVM == null)
        {
            <div class="loading_">
                <span class="loader"></span>
            </div>
        }
        else if (lawVM != null)
        {
            <div class="left-content">
                    <div class="index">
                        <TreeView Items="@dataIndex" OnSelect="item => showContentEdit(item)" />
                    </div>
            </div>
        }
        @if(contentEdit != null)
        {
            <div class="right-content">
                @if (dataIndex != null)
                {
                    <div class="document-view">
                        @contentEdit
                    </div>
                }
            </div>
        }
    </div>
</div>

<!-- Modal delete law -->
<div class="modal fade" id="modal-delete" tabindex="-1" role="dialog"  aria-hidden="true">
    <div class="modal-dialog" style="max-width: 500px" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Delete Law</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                Bạn có chắc muốn xóa văn bản luật khỏi cơ sở dữ liệu ?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancle</button>
                <button type="button" class="btn btn-primary" @onclick="DeleteLaw">OK</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal edit law  -->
@if (dataToEdit != null)
{
    <div class="modal fade" id="modal-edit" tabindex="-1" role="dialog"  aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                @if(dataToEdit.Type == "Chapter")
                {
                    <div class="modal-header">
                        <h5 class="modal-title">Edit content @dataToEdit.Type</h5>
                    </div>
                    <div class="modal-body">
                        <form spellcheck="false">
                            <div class="form-group">
                                <label class="col-form-label fw-bold">Name:</label>
                                <input type="text" class="form-control" @bind="dataToEdit.Chapter.Name">
                            </div>
                            <div class="form-group">
                                <label class="col-form-label fw-bold mt-2">Title:</label>
                                <textarea class="form-control" @bind="dataToEdit.Chapter.Title"></textarea>
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancle</button>
                        <button type="button" class="btn btn-primary" data-dismiss="modal" @onclick="() => ChapterContentEditRequest(dataToEdit)">Save change</button>
                    </div>
                }
                @if(dataToEdit.Type == "Section")
                {
                    <div class="modal-header">
                        <h5 class="modal-title">Edit content @dataToEdit.Type</h5>
                    </div>
                    <div class="modal-body">
                        <form spellcheck="false">
                            <div class="form-group">
                                <label class="col-form-label fw-bold">Name:</label>
                                <input type="text" class="form-control" @bind="dataToEdit.Section.Name">
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancle</button>
                        <button type="button" class="btn btn-primary" data-dismiss="modal" @onclick="() => SectionContentEditRequest(dataToEdit)">Save change</button>
                    </div>
                }
                @if(dataToEdit.Type == "Artical")
                {
                    <div class="modal-header">
                        <h5 class="modal-title">Edit content @dataToEdit.Type</h5>
                    </div>
                    <div class="modal-body">
                        <form spellcheck="false">
                            <div class="form-group">
                                <label class="col-form-label fw-bold">Name:</label>
                                <input type="text" class="form-control" @bind="dataToEdit.Artical.Name">
                            </div>
                            <div class="form-group">
                                <label class="col-form-label fw-bold mt-2">Title:</label>
                                <textarea class="form-control" @bind="dataToEdit.Artical.Title"></textarea>
                            </div>
                            <div class="form-group">
                                <label class="col-form-label fw-bold mt-2">Content:</label>
                                <textarea class="form-control" @bind="dataToEdit.Artical.Content"></textarea>
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancle</button>
                        <button type="button" class="btn btn-primary" data-dismiss="modal" @onclick="() => ArticalContentEditRequest(dataToEdit)">Save change</button>
                    </div>
                }
            </div>
        </div>
    </div>
}

<!-- Modal generate-->
<div class="modal fade" id="modal-generate-keyphrase" tabindex="-1" role="dialog">
    <div class="modal-dialog modal-dialog-centered" style="max-width:500px;" role="document">
        <div class="modal-content">
            @if (loadingGenerate)
            {
                <div class="modal-header">
                    <h5 class="modal-title fw-bold">Auto generate</h5>
                </div>
                <div class="modal-body d-flex justify-content-center flex-wrap">
                    <span class="loader-generate"></span>
                </div>
            }
            @if(!loadingGenerate)
            {
                <div class="modal-header">
                    <h5 class="modal-title fw-bold">Auto generate</h5>
                </div>
                <div class="modal-body d-flex justify-content-center flex-wrap ">
                    @if (messageGenerateData != null)
                    {
                        <h5 class="w-100 d-flex justify-content-center ">@messageGenerateData</h5>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" @onclick="ConfirmModel" data-dismiss="modal">OK</button>
                </div>
            }
        </div>
    </div>
</div>


@code {
    public List<LawDoc> lstLawDoc = new List<LawDoc>();
    public List<Chapter> lstChapter = new List<Chapter>();
    public LawVM lawVM = new LawVM();
    public int idLawSelect;
    public List<TreeViewItem> dataIndex;
    public string contentEdit = null;
    public TreeViewItem dataToEdit = null;
    public bool showModal = false;
    public bool confirmed = false;
    public bool loadingGenerate = true;
    public string messageGenerateData = null;

    protected override async Task OnInitializedAsync()
    {
        Boolean isLogin = await localStorage.GetItemAsync<Boolean>(LocalStorageKeys.isLogin);
        if (!isLogin)
        {
            NavigationManager.NavigateTo("/");
        }
        await InvokeAsync(StateHasChanged);

        lawVM = null;
        dataIndex = null;
        dataToEdit = null;
        var lstLawDocData = await lawDocAdminService.GetListLawDoc();
        lstLawDoc = lstLawDocData;
        var data = await lawDocAdminService.GetDataLaw(lstLawDoc[0].ID);
        idLawSelect = lstLawDoc[0].ID;
        lawVM = data;
        if (lawVM != null)
        {
            dataIndex = getDataIndex();
        }
    }

    private async void GetDataLaw(ChangeEventArgs e)
    {
        lawVM = null;
        dataIndex = null;
        int id = Convert.ToInt32(e.Value);
        idLawSelect = id;
        var data = await lawDocAdminService.GetDataLaw(id);
        lawVM = data;
        if (lawVM != null)
        {
            dataIndex = getDataIndex();
        }
        contentEdit = null;
        StateHasChanged();
    }

    public async void DeleteLaw()
    {
        var rs = await lawDocAdminService.DeleteLaw(idLawSelect);
        if (rs)
        {
            await JsRuntime.InvokeVoidAsync("alert", "Delete success!");
            ReloadPage();
        }
        else
        {
            await JsRuntime.InvokeVoidAsync("alert", "Delete fail!");
        }
    }

    public void ReloadPage()
    {
        NavigationManager.NavigateTo(NavigationManager.Uri, true);
    }

    private List<TreeViewItem> getDataIndex()
    {
        List<TreeViewItem> treeChapters = new List<TreeViewItem>();
        foreach (var c in lawVM.lstChapters)
        {
            TreeViewItem treeChapter = new TreeViewItem(c.Name + ": " + c.Title,"Chapter",c.ID);
            treeChapter.Chapter = new Chapter{ ID = c.ID, Name = c.Name,Title = c.Title};
            if (c.lstSections != null && c.lstSections.Count > 0)
            {
                List<TreeViewItem> treeSections = new List<TreeViewItem>();
                var sections = c.lstSections
                       .Where(x => x.ChapterID == c.ID)
                       .OrderBy(x => x.ID);
                foreach (var s in sections)
                {
                    TreeViewItem treeSection = new TreeViewItem(s.Name != "" ? s.Name : "","Section",s.ID);
                    treeSection.Section = new Section { ID = s.ID, Name = s.Name };
                    if (s.lstArticals != null && s.lstArticals.Count > 0)
                    {
                        List<TreeViewItem> treeArticals = new List<TreeViewItem>();
                        var articals = s.lstArticals
                                        .Where(x => x.ChapterItemID == s.ID)
                                        .OrderBy(x => x.ID);
                        foreach (var a in articals)
                        {
                            TreeViewItem treeArtical = new TreeViewItem(a.Name + ": " + a.Title, "Artical", a.ID);
                            treeArtical.Artical = new Artical { ID = a.ID, Name = a.Name, Title = a.Title, Content = a.Content };
                            treeArticals.Add(treeArtical);                            
                        }
                        treeSection.Children = treeArticals;
                    }
                    treeSections.Add(treeSection);
                }
                treeChapter.Children = treeSections;
            }
            treeChapters.Add(treeChapter);
        }
        return treeChapters;
    }

    private void showContentEdit(TreeViewItem item)
    {
        dataToEdit = item;
        if(item.Type == "Chapter")
        {
            var c = lawVM.lstChapters.FirstOrDefault(x => x.ID == item.ID);
            if(c != null)
            {
                contentEdit = c.Name + ": " + c.Title;
            }
        }if(item.Type == "Section" && item.Text != "")
        {
            var s = lawVM.lstChapters
                        .SelectMany(x => x.lstSections)
                        .FirstOrDefault(x => x.ID == item.ID);
            if (s != null)
            {
                contentEdit = s.Name;
            }
        }if(item.Type == "Artical")
        {
            var a = lawVM.lstChapters
                        .SelectMany(c => c.lstSections.SelectMany(s => s.lstArticals))
                        .FirstOrDefault(x => x.ID == item.ID);
            if (a != null)
            {
                contentEdit = a.Content;
            }
        }
    }

    private async void ChapterContentEditRequest(TreeViewItem item)
    {
        if (item.Chapter.Name != "" && item.Chapter.Title != "")
        {
            var rs = await lawDocAdminService.EditContentChapter(item.Chapter.ID, item.Chapter.Name, item.Chapter.Title);
            if (rs)
            {
                await JsRuntime.InvokeVoidAsync("alert", "Edit success!");
                StateHasChanged();
            }
            else
            {
                await JsRuntime.InvokeVoidAsync("alert", "Edit fail!");
            }
        }   
    }

    private async void SectionContentEditRequest(TreeViewItem item)
    {
        if (item.Section.Name != "")
        {
            var rs = await lawDocAdminService.EditeContentSection(item.Section.ID, item.Section.Name);
            if (rs)
            {
                await JsRuntime.InvokeVoidAsync("alert", "Edit success!");
                StateHasChanged();
            }
            else
            {
                await JsRuntime.InvokeVoidAsync("alert", "Edit fail!");
            }
        }
    }

    private async void ArticalContentEditRequest(TreeViewItem item)
    {
        if (item.Artical.Name != "" && item.Artical.Title != "" && item.Artical.Content != "")
        {
            var rs = await lawDocAdminService.EditeContentArtical(item.Artical.ID, item.Artical.Name, item.Artical.Title, item.Artical.Content);
            if (rs)
            {
                await JsRuntime.InvokeVoidAsync("alert", "Edit success!");
                StateHasChanged();
            }
            else
            {
                await JsRuntime.InvokeVoidAsync("alert", "Edit fail!");
            }
        }
    }

    private async void AutogenerateData()
    {
        var rs = await lawDocAdminService.AutoGenerateData(idLawSelect);
        if (rs)
        {
            messageGenerateData = "Generate dữ liệu tự động thành công!";
            loadingGenerate = false;
            StateHasChanged();
        }
        else
        {
            messageGenerateData = "Có lỗi xảy ra, generate dữ liệu tự động không thành công!";
            loadingGenerate = false;
            StateHasChanged();
        }
    }

    private void ConfirmModel()
    {
        loadingGenerate = true;       
        StateHasChanged();
    }
}

