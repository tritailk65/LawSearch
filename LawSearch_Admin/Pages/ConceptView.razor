@page "/concept"
@inject IConceptAdminService conceptAS;
@inject IKeyPhraseAdminService keyphraseAS
@inject IJSRuntime JsRuntime;
@inject NavigationManager NavigationManager;
@inject ICheckUserHasAccessService _checkUserHasAccesService;
@inject AuthenticationStateProvider _authenticationStateProvider;

<AuthorizeView>
    <Authorized>
        @* Băt đầu web *@
        <div class="background_view">
            @if (isOpenForm_AddNewConcept)
            {
                <div class="form_add_new_concept_background_view">
                    <div class="form_add_new_concept_view">
                        <div class="top_form_view">
                            <div class="title_form"><a>Add New Concept</a></div>
                            <div class="close_btn" @onclick="CloseAddNewConceptForm"><img class="icon" src="assets/icon/close_480px.png" /></div>
                        </div>
                        <div>
                            <div class="concept_input_view">
                                <a>Concept:</a>
                                <div class="input_concept">
                                    <input id="input_concept" placeholder="concept" @oninput="SetNewConcept" />
                                </div>
                            </div>
                            <div class="warning_input"><a>@warning_input_conecept</a></div>
                            <div class="description_input_view">
                                <a>Description:</a>
                                <div class="input_description">
                                    <textarea id="input_description" placeholder="@Description_text" @oninput="SetNewDescription"></textarea>
                                </div>
                            </div>
                            <div class="warning_input"><a>@warning_input_description</a></div>
                            <div class="confirm_btn_view" @onclick="AddNewConcept">
                                <div class="confirm_btn"><a>Confirm</a></div>
                            </div>
                        </div>
                    </div>
                </div>
            }
            @if (isOpenForm_EditConcept)
            {
                <div class="form_add_new_concept_background_view">
                    <div class="form_add_new_concept_view">
                        <div class="top_form_view">
                            <div class="title_form"><a>Edit Concept</a></div>
                            <div class="close_btn" @onclick="CloseEditConceptForm"><img class="icon" src="assets/icon/close_480px.png" /></div>
                        </div>
                        <div>
                            <div class="concept_input_view">
                                <a>Concept:</a>
                                <div class="input_concept">
                                    <input id="input_concept"
                                           placeholder="concept"
                                           @oninput="SetNewConcept"
                                           value="@SelectedConcept?.Name" />
                                </div>
                            </div>
                            <div class="warning_input"><a>@warning_input_conecept</a></div>
                            <div class="description_input_view">
                                <a>Description:</a>
                                <div class="input_description">
                                    <textarea id="input_description"
                                              placeholder="@Description_text"
                                              @oninput="SetNewDescription"
                                              value="@SelectedConcept?.Content">
                                    </textarea>
                                </div>
                            </div>
                            <div class="warning_input"><a>@warning_input_description</a></div>
                            <div class="confirm_btn_view" @onclick="EditConcept">
                                <div class="confirm_btn"><a>Confirm</a></div>
                            </div>
                        </div>
                    </div>
                </div>
            }
            @if (isOpenForm_DeleteConcept)
            {
                <div class="form_add_new_concept_background_view">
                    <div class="dialog_delete_view">
                        <div class="dialog_title_view">
                            <a>Are you confirm delete this?</a>
                        </div>
                        <div class="dialog_buttons_view">
                            <div class="button_dialog"
                                 style="background-color: #7367F0"
                                 @onclick="ConfirmDeleteConcept">
                                <a>Yes</a>
                            </div>
                            <div class="button_dialog" @onclick="CancelDeleteConcept">
                                <a>No</a>
                            </div>
                        </div>
                    </div>
                </div>
            }
            <div class="main_view">
                <div class="button_concept_view">
                    @* Generate Keyphrase (generate keyphrase từ description khi add một concept mới) *@
                    <div class="my_button" @onclick="() => {}"><a>Generate Keyphrase</a></div>
                    <div class="my_button" @onclick="OpenAddNewConceptForm"><a>Add new concept</a></div>
                    <div class="my_button" @onclick="OpenEditConceptForm"><a>Edit</a></div>
                    <div class="my_button" @onclick="OpenDeleteConceptForm"><a>Delete</a></div>
                </div>
                <div class="content_view">
                    <div class="list_concept_view">
                        <ul>
                            @if (isLoading_GetListConcept)
                            {
                                <a>Loading...</a>
                            }
                            else
                            {
                                if (Concepts != null && Concepts.Count() > 0)
                                {
                                    int index = 1;
                                    foreach (var concept in Concepts)
                                    {
                                        <li>
                                            <div class="@((SelectedConcept == concept) ? "item_selected" : "item_not_selected")"
                                                 onclick="@(async Task() => {await SelectConceptFunction(concept);})">
                                                <a>@index. @concept.Name</a>
                                            </div>
                                        </li>

                                        index += 1;
                                    }
                                }
                                else
                                {
                                    <a>Empty</a>
                                }
                            }
                        </ul>
                    </div>
                    <div class="content_concept_view">
                        <a id="content_of_concept">
                            @if (SelectedConcept != null)
                            {
                                @SelectedConcept?.Content
                                ;
                            }
                        </a>
                    </div>
                    <div class="list_keyphrase_of_concept_view">
                        <div class="keyphrase_buttons_view">
                            <div class="search_keyphrase_view">
                                <input id="textInput" type="text" placeholder="new keyphrase" @oninput="SetNewKeyphrase" value="@new_keyphrase" />
                            </div>
                            <div class="my_button add_new_keyphrase_button"
                                 @onclick="AddNewKeyphrase">
                                <a>Add new keyphrase</a>
                            </div>
                        </div>
                        <div class="list_keyphrase_view">
                            <ul>
                                @if (isLoading_GetListKeyphrase)
                                {
                                    <li><a>Loading...</a></li>
                                }
                                else
                                {
                                    if (Keyphrases == null || Keyphrases.Count == 0)
                                    {
                                        <a>Empty</a>
                                    }
                                    else
                                    {
                                        foreach (var keyphrase in Keyphrases)
                                        {
                                            <li>
                                                <div class="keyphrase_not_selected">
                                                    <a>@keyphrase.KeyPhrase</a>

                                                    <div onclick="@(async Task() => {await DeleteConceptKeyphrase(keyphrase);})">
                                                        <a>Xoá</a>
                                                    </div>
                                                </div>
                                            </li>
                                        }
                                    }
                                }
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        @* Kết thúc web *@

        @* Băt đầu script *@
        <script type="text/javascript">

        </script>
        @* Kết thúc script *@
    </Authorized>
</AuthorizeView>

@code {
    public Boolean isLoading_GetListConcept = true;
    public Boolean isLoading_GetListKeyphrase = true;
    public Boolean isOpenForm_AddNewConcept = false;
    public Boolean isOpenForm_EditConcept = false;
    public Boolean isOpenForm_DeleteConcept = false;
    public List<Concept> Concepts = new List<Concept>();
    public Concept? SelectedConcept = new Concept();
    public List<ConceptKeyphraseShow> Keyphrases = new List<ConceptKeyphraseShow>();
    string search_keyphrase = "";
    string Description_text = "A concept is defined as an abstract idea. It is understood to be a fundamental building block underlying principles, thoughts and beliefs. Concepts play an important role in all aspects of cognition. As such, concepts are studied within such disciplines as linguistics, psychology, and philosophy, and these disciplines are interested in the logical and psychological structure of concepts, and how they are put together to form thoughts and sentences. The study of concepts has served as an important flagship of an emerging interdisciplinary approach, cognitive science.";
    string new_concept = "";
    string new_description = "";
    string warning_input_conecept = "";
    string warning_input_description = "";
    string new_keyphrase = "";

    protected override async Task OnInitializedAsync()
    {
        var checkAccess = await _checkUserHasAccesService.CheckUserHasAccessAsync();
        if (!checkAccess)
        {
            NavigationManager.NavigateTo("/");
        }

        // fetch concept
        await fetchConcept();

        // fetch keyphrase
        if (Concepts.Count() > 0)
        {
            await fetchKeyphrase(Concepts[0].ID);
        }
        else
        {
            isLoading_GetListKeyphrase = false;
        }
        // Re-render Method
        StateHasChanged();
    }

    public async Task fetchConcept()
    {
        var data_concept = await conceptAS.GetListConcept();
        if (data_concept == null || data_concept.Count == 0)
        {
            Concepts.Clear();
        }
        else
        {
            Concepts = data_concept;
        }

        if (Concepts.Count() > 0)
        {
            SelectedConcept = Concepts[0];
        }
        else
        {
            SelectedConcept = null;
        }
        isLoading_GetListConcept = false;
    }

    public async Task fetchKeyphrase(int concept_id)
    {
        isLoading_GetListKeyphrase = true;
        var data_keyphrase = await conceptAS.GetListKeyphraseByConceptID(concept_id);
        if (Keyphrases != null) Keyphrases.Clear();
        Keyphrases = data_keyphrase;
        isLoading_GetListKeyphrase = false;
    }

    public async Task SelectConceptFunction(Concept concept)
    {
        SelectedConcept = concept;
        await fetchKeyphrase(concept.ID);
        // Re-render Method
        StateHasChanged();
    }

    public void OpenAddNewConceptForm()
    {
        isOpenForm_AddNewConcept = true;
        // Re-render Method
        StateHasChanged();
    }

    public void CloseAddNewConceptForm()
    {
        isOpenForm_AddNewConcept = false;
        warning_input_conecept = "";
        warning_input_description = "";
        // Re-render Method
        StateHasChanged();
    }

    public void SetNewConcept(ChangeEventArgs e)
    {
        if (e != null)
        {
            new_concept = e.Value?.ToString() ?? "";
        }
    }

    public void SetNewDescription(ChangeEventArgs e)
    {
        if (e != null)
        {
            new_description = e.Value?.ToString() ?? "";
        }
    }

    public void SetNewKeyphrase(ChangeEventArgs e)
    {
        if (e != null)
        {
            new_keyphrase = e.Value?.ToString() ?? "";
        }
    }


    public async void AddNewConcept()
    {
        if (new_concept == "")
        {
            warning_input_conecept = "Please fill in this field";
            // Re-render Method
            StateHasChanged();
            return;
        }

        if (new_description == "")
        {
            warning_input_description = "Please fill in this field";
            // Re-render Method
            StateHasChanged();
            return;
        }

        if (new_concept != "" && new_description != "")
        {
            warning_input_conecept = "";
            warning_input_description = "";
            // Re-render Method
            StateHasChanged();

            // Logic add here
            ResponseMessage rsAddConcept = await conceptAS.AddConcept(new_concept, new_description);

            if (rsAddConcept != null)
            {
                if(rsAddConcept.StatusAPI)
                {
                    await JsRuntime.InvokeVoidAsync("alert", rsAddConcept.Message);
                    await fetchConcept();
                } else
                {
                    await JsRuntime.InvokeVoidAsync("alert", rsAddConcept.Error);
                }
                CloseAddNewConceptForm();
            }
            else
            {
                // handler error
            }
        }
    }

    public void OpenEditConceptForm()
    {
        if (SelectedConcept == null) return;

        isOpenForm_EditConcept = true;
        new_concept = SelectedConcept.Name;
        new_description = SelectedConcept.Content;
        // Re-render Method
        StateHasChanged();
    }

    public void CloseEditConceptForm()
    {
        isOpenForm_EditConcept = false;
        warning_input_conecept = "";
        warning_input_description = "";
        // Re-render Method
        StateHasChanged();
    }

    public async void EditConcept()
    {
        Concept c = new();
        if (SelectedConcept == null)
        {
            await JsRuntime.InvokeVoidAsync("alert", "You have not selected yet!");
            return;
        } else
        {
            c = SelectedConcept;
        }

        if (new_concept == "")
        {
            await JsRuntime.InvokeVoidAsync("alert", "Please fill in concept");
            return;
        } else
        {
            c.Name = new_concept;
        }
        if (new_description == "")
        {
            await JsRuntime.InvokeVoidAsync("alert", "Please fill in description");
            return;
        } else
        {
            c.Content = new_description;
        }

        ResponseMessage rs = await conceptAS.UpdateConcept(c);
        if (rs.StatusAPI)
        {
            await JsRuntime.InvokeVoidAsync("alert", rs.Message);
            CloseEditConceptForm();
        }
        else
        {
            await JsRuntime.InvokeVoidAsync("alert", rs.Message);
            await JsRuntime.InvokeVoidAsync("alert", "Error: " + rs.Error);
            CloseEditConceptForm();
        }
    }

    public void OpenDeleteConceptForm()
    {
        isOpenForm_DeleteConcept = true;
        // Re-render Method
        StateHasChanged();
    }

    public void CloseDeleteConceptForm()
    {
        isOpenForm_DeleteConcept = false;
        // Re-render Method
        StateHasChanged();
    }

    public async Task ConfirmDeleteConcept()
    {
        await fetchDeleteConcept();
        CloseDeleteConceptForm();
    }
    public void CancelDeleteConcept()
    {
        CloseDeleteConceptForm();
    }

    public async Task fetchDeleteConcept()
    {
        if (SelectedConcept == null) return;
        ResponseMessage rs = await conceptAS.DeleteConcept(SelectedConcept.ID);

        if (rs != null)
        {
            if (rs.StatusAPI)
            {
                await JsRuntime.InvokeVoidAsync("alert", rs.Message);
                await fetchConcept();
            }
            else
            {
                await JsRuntime.InvokeVoidAsync("alert", rs.Error);
            }
        }
    }

    public void MapKeyphrase()
    {
        // Step 3 - Add [KeyphraseMapping]
    }

    public async Task AddNewKeyphrase()
    {
        ResponseMessage rs = new();

        if (new_keyphrase != null && SelectedConcept != null)
        {
            rs = await conceptAS.AddConceptKeyphrase(SelectedConcept.ID, new_keyphrase);
        }

        if (rs != null)
        {
            if (rs.StatusAPI)
            {
                await JsRuntime.InvokeVoidAsync("alert", rs.Message);
                await fetchKeyphrase(SelectedConcept.ID);
            }
            else
            {
                await JsRuntime.InvokeVoidAsync("alert", rs.Error);
                return;
            }
        }

        new_keyphrase = "";
        StateHasChanged();
    }

    static List<string> SplitString(string text, int chunkSize)
    {
        List<string> chunks = new List<string>();

        for (int i = 0; i < text.Length; i += chunkSize)
        {
            int length = Math.Min(chunkSize, text.Length - i);
            chunks.Add(text.Substring(i, length));
        }

        return chunks;
    }

    public async Task DeleteConceptKeyphrase(ConceptKeyphraseShow k)
    {
        ResponseMessage rs = new();

        rs = await conceptAS.DeleteConceptKeyphrase(k);

        if (rs != null)
        {
            if (rs.StatusAPI)
            {
                await JsRuntime.InvokeVoidAsync("alert", rs.Message);
                if (SelectedConcept != null)
                {
                    await fetchKeyphrase(SelectedConcept.ID);
                }
            }
            else
            {
                await JsRuntime.InvokeVoidAsync("alert", rs.Error);
                return;
            }
        }

        StateHasChanged();
    }

}
