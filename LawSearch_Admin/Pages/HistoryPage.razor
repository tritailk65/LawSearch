@page "/history"
@inject NavigationManager NavigationManager;
@inject IHistoryAdminService historyService;
@inject ICookieService _cookieService;
@inject AuthenticationStateProvider _authenticationStateProvider;

<AuthorizeView Context="authContext">
    <Authorized>
        <style>
            .input-date {
                width: 200px;
                margin-right: 20px;
                border-radius: 10px;
                border: 2px solid #7367F0;
            }
        </style>
        <div class="main-content mt-4">
            <div class="d-flex align-items-center align-content-center w-100" style="background: #303348; border: 2px solid #44475D ;border-radius:10px; height:100px;">
                <EditForm Model="model" OnValidSubmit="Submit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div class="d-flex w-100 align-content-center">

                        <label class="mx-lg-3 fs-6 fw-bold align-content-center">From date:</label>

                        <InputDate class="input-date" @bind-Value="model!.fromDate" />

                        <label class="mx-lg-3 fs-6 fw-bold  align-content-center">To date:</label>

                        <InputDate class="input-date" @bind-Value="model!.toDate" />

                        <Button ButtonStyle="reset-button btn-custom" @onclick="@(() => OnButtonClick("Search"))" style="width: 160px; margin-top: 0px; margin-left:10px">
                            Search
                        </Button>

                        <Button ButtonStyle="reset-button btn-custom" @onclick="@(() => OnButtonClick("DeleteHistory"))" style="width: 160px; margin-top: 0px; margin-left:10px">
                            Delete History
                        </Button>
                    </div>
                </EditForm>
            </div>
            <div class="table-content">
                @if (loadingData)
                {
                    <div class="loading_">
                        <span class="loader"></span>
                    </div>
                }
                @if (data != null && !loadingData)
                {
                    if (data.Count > 0)
                    {
                        <table class="table table-dark table-striped table-hover" style="border-color:none; cursor: pointer">
                            <thead style="height: 50px">
                                <tr>
                                    <th scope="col">Number</th>
                                    <th scope="col">Search</th>
                                    <th scope="col">DateTime</th>
                                    <th scope="col">Count</th>
                                    <th scope="col">User</th>
                                </tr>
                            </thead>
                            <tbody>
                                @for (var i = 0; i < data.Count; i++)
                                {
                                    var index = i;
                                    <tr  @onclick="() => RowHistoryClicked(data[index].Value)">
                                        <th scope="row"> @(i + 1)</th>
                                        <td>@data[i].Value</td>
                                        <td>@data[i].DateTime</td>
                                        <td>@data[i].Count</td>
                                        <td>@data[i].UserName</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    }
                    else
                    {
                        <div class="w-100 h-100 my-lg-5 d-flex justify-content-center align-items-center">
                            <img class="" style="width:320px; height: 300px" src="assets/image/noresult.png" alt="no-result-image" />
                        </div>
                    }
                }
            </div>
        </div>
    </Authorized>
</AuthorizeView>

@code {
    [SupplyParameterFromQuery]
    private FormDateModel? model { get; set; }
    private List<HistorySearch>? data = new List<HistorySearch>();
    private bool loadingData = false;
    private bool isEmpty = false;
    private string userID = string.Empty;
    private string currentAction = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        data = null;
        loadingData = true;
        model ??= new() { fromDate = DateTime.UtcNow.AddDays(-15), toDate = DateTime.UtcNow };

        var getUserIDFromCookie = await _cookieService.GetValue(CookieKeys.userid);
        if (!string.IsNullOrEmpty(getUserIDFromCookie)) { userID = getUserIDFromCookie; }

        var rs = await historyService.GetHistorySearch(Convert.ToInt32(userID), model.fromDate, model.toDate);
        if (rs != null)
        {
            data = rs;
            loadingData = false;
            StateHasChanged();
        }
    }

    private void OnButtonClick(string action)
    {
        currentAction = action;
    }

    private async void Submit()
    {
        //Console.WriteLine($"From date = {model?.fromDate} To date = {model?.toDate}");
        //Console.WriteLine($"Submit: {currentAction}");

        loadingData = true;
        if(model != null && currentAction == "Search")
        {
            var getData = await historyService.GetHistorySearch(Convert.ToInt32(userID), model.fromDate, model.toDate);

            if (getData != null)
            {
                data = getData;
                loadingData = false;
                StateHasChanged();
            }
            else
            {
                data = null;
                loadingData = false;
                StateHasChanged();
            }
        }
        if (model != null && currentAction == "DeleteHistory")
        {
            await historyService.DeleteHistorySearch(Convert.ToInt32(userID), model.fromDate, model.toDate);
            var getData = await historyService.GetHistorySearch(Convert.ToInt32(userID), model.fromDate, model.toDate);

            if (getData != null)
            {
                data = getData;
                loadingData = false;
                StateHasChanged();
            }
            else
            {
                data = null;
                loadingData = false;
                StateHasChanged();
            }
        }
    }

    private void RowHistoryClicked(string searchAgain)
    {
        NavigationManager.NavigateTo($"/{Uri.EscapeDataString(searchAgain)}");
    }
}
